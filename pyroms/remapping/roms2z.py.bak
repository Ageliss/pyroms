# encoding: utf-8

import numpy as np
import _interp

def roms2z(var, grd, grdz, Cpos='rho', spval=1e35, mode='linear'):
    """
    varz = roms2z(var, grd, grdz)

    optional switch:
      - Cpos='rho', 'u' or 'v'	     specify the C-grid position where 
				     the variable rely
      - spval=1e35                   define spval value
      - mode='linear' or 'spline'    specify the type of interpolation

    Interpolate the variable from ROMS grid grd to z vertical grid grdz
    """

    var = var.copy()

    if mode=='linear':
        imode=0
    elif mode=='spline':
        imode=1
    else:
        imode=0
        raise Warning, '%s not supported, defaulting to linear' % mode


    if Cpos is 'rho':
        z = grd.vgrid.z_r[0,:]
        depth = grdz.vgrid.z
    elif Cpos is 'u':
        z = 0.5 * (grd.vgrid.z_r[0,:,:,:-1] + grd.vgrid.z_r[0,:,:,1:])
        depth = 0.5 * (grdz.vgrid.z[:,:,:-1] + grdz.vgrid.z[:,:,1:])
    elif Cpos is 'v':
        z = 0.5 * (grd.vgrid.z_r[0,:,:-1,:] + grd.vgrid.z_r[0,:,1:,:])
        depth = 0.5 * (grdz.vgrid.z[:,:-1,:] + grdz.vgrid.z[:,1:,:])
    elif Cpos is 'w':
        z = grd.vgrid.z_w[0,:]
        depth = grdz.vgrid.z
    else:
        z = grd.vgrid.z_r[0,:]
        depth = grdz.vgrid.z
        raise Warning, '%s bad position. Use depth at Arakawa-C rho points instead.' % Cpos

    Nm, Mm, Lm = z.shape
    nlev = grdz.vgrid.N

    var = np.concatenate((var, var[-2:-1,:,:]), 0)
    z = np.concatenate((z, 100*np.ones((1,Mm,Lm))), 0)

    varz = np.zeros((nlev, Mm, Lm))

    for k in range(nlev):
        varz[k,:,:] = _interp.xhslice(var, z, depth[k,:], imode, spval)

    #mask    
    varz = np.ma.masked_values(varz, spval, rtol=1e-5)
    
    return varz
